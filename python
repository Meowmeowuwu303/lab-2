# main.py

from typing import List, Dict, Optional

# =================================================================
# 1. Ідентифікатори
# =================================================================

# Оголошуємо змінну та записуємо в неї ім'я.
# В Python немає ключового слова let, змінні створюються простим присвоєнням.
my_name: str = "Василь"

# Оголошуємо "константу" для року народження.
# В Python немає строгих констант, як у багатьох інших мовах.
# За загальноприйнятою домовленістю (PEP 8), імена констант пишуть
# ВЕЛИКИМИ_ЛІТЕРАМИ, щоб показати розробникам, що це значення не слід змінювати.
YEAR_OF_BIRTH: int = 2005

def greet(name: str) -> None:
    """
    Друкує привітання для заданого імені.
    :param name: Ім'я користувача для привітання.
    """
    print(f"Привіт, {name}!")

# =================================================================
# 2. Цикли
# =================================================================

def range_list(start: int, end: int) -> List[int]:
    """
    Повертає масив (список) чисел з діапазону [start, end],
    включаючи крайні числа.
    
    Примітка: вбудована функція range() в Python не включає останнє число,
    тому ми додаємо до end одиницю.
    """
    return list(range(start, end + 1))

def range_odd(start: int, end: int) -> List[int]:
    """
    Повертає масив (список) непарних чисел з діапазону [start, end],
    включаючи крайні числа.
    """
    result = []
    for number in range(start, end + 1):
        if number % 2 != 0:
            result.append(number)
    return result

# =================================================================
# 3. Функції
# =================================================================

def average(a: float, b: float) -> float:
    """Обчислює середнє арифметичне двох чисел."""
    return (a + b) / 2

def square(x: float) -> float:
    """Обчислює квадрат числа."""
    return x ** 2

def cube(x: float) -> float:
    """Обчислює куб числа."""
    return x ** 3

def calculate() -> List[float]:
    """
    У циклі від 0 до 9 обчислює квадрат та куб числа,
    знаходить їх середнє арифметичне та додає результат у масив (список).
    """
    results = []
    for i in range(10):  # range(10) генерує числа від 0 до 9
        sq = square(i)
        cb = cube(i)
        avg = average(sq, cb)
        results.append(avg)
    return results

# =================================================================
# 4. Об'єкти (в Python це Словники - dict)
# =================================================================

def objects_example():
    """
    Демонструє роботу зі словниками, які присвоєні "константі" та звичайній змінній.
    """
    # В Python немає різниці між const і let як у JavaScript.
    # Будь-яка змінна може бути переприсвоєна.
    # Конвенція про ВЕЛИКІ_ЛІТЕРИ — це лише порада для інших програмістів.

    # 1. Створюємо словник і присвоюємо його "константі"
    # Це посилання на об'єкт у пам'яті.
    PERSON_CONST = {
        'name': 'Іван'
    }

    # 2. Створюємо словник і присвоюємо його змінній
    person_let = {
        'name': 'Петро'
    }

    print("--- Початкові об'єкти ---")
    print(f"PERSON_CONST: {PERSON_CONST}")
    print(f"person_let: {person_let}\n")

    # 3. Змінюємо значення поля 'name' в обох об'єктах.
    # Це працює для обох, тому що ми змінюємо вміст самого об'єкта (він є mutable),
    # а не посилання, яке зберігається у змінній.
    PERSON_CONST['name'] = 'Іван Франко'
    person_let['name'] = 'Петро Могила'

    print("--- Після зміни поля 'name' ---")
    print(f"PERSON_CONST: {PERSON_CONST} (змінити поле можна)")
    print(f"person_let: {person_let} (змінити поле можна)\n")

    # 4. Записуємо посилання на інший об'єкт.
    # В Python це можливо для будь-якої змінної.
    # Хоча PERSON_CONST є "константою" за домовленістю, мова не забороняє її змінити.
    # Хороший програміст так робити не буде, але технічно це можливо.
    person_let = {'name': 'Новий обʼєкт'}
    # PERSON_CONST = {'name': 'Інший новий обʼєкт'} # <- Так робити не варто за конвенцією

    print("--- Після переприсвоєння змінної ---")
    print(f"person_let: {person_let} (переприсвоїти можна)")
    print("Змінну PERSON_CONST ми не переприсвоюємо, бо дотримуємось конвенції.\n")


def create_user(name: str, city: str) -> Dict[str, str]:
    """Створює та повертає словник з даними користувача."""
    return {
        'name': name,
        'city': city
    }

# =================================================================
# 5. Колекції
# =================================================================

# --- Частина 1: Зберігання у списку словників (масив об'єктів) ---

phone_book_list: List[Dict[str, str]] = [
    {'name': 'Marcus Aurelius', 'phone': '+380445554433'},
    {'name': 'Seneca', 'phone': '+380445551122'},
    {'name': 'Epictetus', 'phone': '+380445558877'}
]

def find_phone_by_name_from_list(name: str) -> Optional[str]:
    """
    Знаходить телефон за ім'ям у списку словників, перебираючи його циклом for.
    :param name: Ім'я для пошуку.
    :return: Телефонний номер або None, якщо ім'я не знайдено.
    """
    for contact in phone_book_list:
        if contact['name'] == name:
            return contact['phone']
    return None # Повертаємо None, якщо нічого не знайдено

# --- Частина 2: Зберігання у хеш-таблиці (словник) ---

# Це значно ефективніше для пошуку. Ключем є ім'я, значенням - телефон.
phone_book_hash: Dict[str, str] = {
    'Marcus Aurelius': '+380445554433',
    'Seneca': '+380445551122',
    'Epictetus': '+380445558877'
}

def find_phone_by_name_from_hash(name: str) -> Optional[str]:
    """
    Знаходить телефон за ім'ям у словнику (хеш-таблиці) по ключу.
    Використання методу .get() є безпечним, бо він поверне None,
    якщо ключ не існує, і не викличе помилку.
    :param name: Ім'я для пошуку (ключ).
    :return: Телефонний номер або None, якщо ім'я не знайдено.
    """
    return phone_book_hash.get(name)


# =================================================================
# Головний блок для демонстрації роботи функцій
# =================================================================

# Цей блок коду виконається, тільки якщо запустити цей файл напряму.
if __name__ == "__main__":
    print("### 1. Ідентифікатори ###")
    greet(my_name)
    print(f"Мій рік народження: {YEAR_OF_BIRTH}\n")

    print("### 2. Цикли ###")
    print(f"Діапазон [15, 30]: {range_list(15, 30)}")
    print(f"Непарні в [15, 30]: {range_odd(15, 30)}\n")

    print("### 3. Функції ###")
    print(f"Результат функції calculate: {calculate()}\n")

    print("### 4. Об'єкти (Словники) ###")
    objects_example()
    marcus = create_user('Marcus Aurelius', 'Roma')
    print(f"Створений користувач: {marcus}\n")

    print("### 5. Колекції ###")
    # Пошук у списку
    print("Пошук у списку (масиві об'єктів):")
    print(f"Телефон Сенеки: {find_phone_by_name_from_list('Seneca')}")
    print(f"Телефон Платона: {find_phone_by_name_from_list('Platon')}\n")

    # Пошук у хеш-таблиці
    print("Пошук у хеш-таблиці (словнику):")
    print(f"Телефон Сенеки: {find_phone_by_name_from_hash('Seneca')}")
    print(f"Телефон Платона: {find_phone_by_name_from_hash('Platon')}")
